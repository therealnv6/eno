#!/bin/sh

REPO_URLS=(
	"https://github.com/therealnv6/pursonal.git"
	"https://github.com/example/repo.git"
)

PACKAGE_DIR="/usr/local/packages"
INSTALLED_PACKAGES_FILE="$PACKAGE_DIR/.installed_packages"

clone_repos() {
	for url in "${REPO_URLS[@]}"; do
		repo_name=$(basename "$url" .git)
		git clone "$url" "$PACKAGE_DIR/$repo_name"
	done
}

update_repos() {
	cd "$PACKAGE_DIR"
	for package in */; do
		cd "$PACKAGE_DIR/$package"
		git pull
	done
}

install_package() {
	package_name="$1"
	package_path=$(find "$PACKAGE_DIR" -maxdepth 2 -type d -name "$package_name")

	if [ -z "$package_path" ]; then
		echo "Package $package_name not found."
		return
	fi

	if is_package_installed "$package_name"; then
		echo "Package $package_name is already installed."
		return
	fi

	if [ ! -f "$package_path/install" ]; then
		echo "Package $package_name does not contain an 'install' file. Skipping installation."
		return
	fi

	echo "Installing $package_name..."

	# Create a temporary fakeroot environment
	tmp_dir=$(mktemp -d)
	fakeroot_dir="$tmp_dir/fakeroot"
	mkdir "$fakeroot_dir"

	# Copy the package files to the fakeroot environment
	cp -R "$package_path"/* "$fakeroot_dir"

	# Execute the 'install' file within the fakeroot environment
	chmod +x "$fakeroot_dir/install"
	(cd "$fakeroot_dir" && fakeroot -- ./install)

	# Remove the temporary fakeroot environment
	rm -rf "$tmp_dir"

	# Record the installed package in the list
	echo "$package_name" >>"$INSTALLED_PACKAGES_FILE"

	echo "$package_name installed successfully."
}

is_package_installed() {
	package_name="$1"

	if [ -f "$INSTALLED_PACKAGES_FILE" ]; then
		grep -Fxq "$package_name" "$INSTALLED_PACKAGES_FILE"
		return $?
	fi

	return 1
}

uninstall_package() {
	package_name="$1"
	package_path=$(find "$PACKAGE_DIR" -maxdepth 2 -type d -name "$package_name")

	if [ -z "$package_path" ]; then
		echo "Package $package_name is not installed."
		return
	fi

	echo "Uninstalling $package_name..."

	# Create a temporary fakeroot environment
	tmp_dir=$(mktemp -d)
	fakeroot_dir="$tmp_dir/fakeroot"
	mkdir "$fakeroot_dir"

	# Copy the package files to the fakeroot environment
	cp -R "$package_path"/* "$fakeroot_dir"

	# Execute the 'uninstall' file within the fakeroot environment
	chmod +x "$fakeroot_dir/uninstall"
	(cd "$fakeroot_dir" && fakeroot -- ./uninstall)

	# Remove the temporary fakeroot environment
	rm -rf "$tmp_dir"

	# Remove the package from the installed packages list
	sed -i "/^$package_name$/d" "$INSTALLED_PACKAGES_FILE"

	echo "$package_name uninstalled successfully."
}

list_packages() {
	echo "Available packages:"
	find "$PACKAGE_DIR" -maxdepth 2 -type d -print | while read -r package_path; do
		package_name=$(basename "$package_path")
		if [ -f "$package_path/install" ]; then
			echo "- $package_name"
		fi
	done
}

command="$1"
shift

case "$command" in
install)
	install_package "$@"
	;;
uninstall)
	uninstall_package "$@"
	;;
list)
	list_packages
	;;
clone)
	clone_repos
	;;
update)
	update_repos
	;;
*)
	echo -e "Usage: package-manager.sh [command]\n"
	echo "Commands:"
	echo -e "  \033[1minstall\033[0m \t\tInstall a package."
	echo -e "  \033[1muninstall\033[0m \tUninstall a package."
	echo -e "  \033[1mlist\033[0m \t\tList available packages."
	echo -e "  \033[1mclone\033[0m \t\tClone repositories."
	echo -e "  \033[1mupdate\033[0m \t\tUpdate cloned repositories."
	exit 1
	;;
esac
